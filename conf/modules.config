/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

process {

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: TRIMGALORE {
        ext.args = '--fastqc',
            publishDir = [
                [
                    path: { "${params.outdir}/trimgalore/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ]
            ]
    }

    withName: BISMARK_GENOMEPREPARATION {
        ext.args = '',
        publishDir = "${params.outdir}/${params.aligner}/reference_genome"
    }

    withName: BISMARK_INDEX {
        ext.args = ''
    }

    withName: BISMARK_ALIGN {
        ext.args = '',
        publishDir = [
            [
                path: { "${params.aligner}/alignments/unmapped" },
                mode: params.publish_dir_mode,
                pattern: "*.fq.gz"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/alignments/logs" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
        ]
    }

    withName: BISMARK_DEDUPLICATE {
        ext.args = '',
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/deduplicated/logs" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
        ]
    }

    withName: BISMARK_METHYLATIONEXTRACTOR {
        ext.args = "",
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/methylation_calls/mbias" },
                mode: params.publish_dir_mode,
                pattern: "M-bias.txt"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/methylation_calls/mbias" },
                mode: params.publish_dir_mode,
                pattern: "*M-bias.txt"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/methylation_calls/logs" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/methylation_calls/methylation_coverage" },
                mode: params.publish_dir_mode,
                pattern: "*cov.gz"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/methylation_calls/bedGraph" },
                mode: params.publish_dir_mode,
                pattern: "*bedGraph.gz"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/methylation_calls/stranded_CpG_report" },
                mode: params.publish_dir_mode,
                pattern: "*report.txt.gz"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/methylation_calls/methylation_calls" },
                mode: params.publish_dir_mode,
                pattern: "*txt.gz"
            ]
        ]
    }

    withName: BISMARK_REPORT {
        ext.args = '',
        publishDir = "${params.outdir}/${params.aligner}/reports"
    }

    withName: BISMARK_SUMMARY {
        ext.args = '',
        publishDir = "${params.outdir}/${params.aligner}/summary"
    }

    withName: BWAMETH_INDEX {
        ext.args = '',
        publishDir = "${params.outdir}/${params.aligner}/reference_genome"
    }

    withName: BWAMETH_ALIGN {
        ext.args = '',
        publishDir = "${params.outdir}/${params.aligner}/alignments"
    }

    withName: PICARD_MARKDUPLICATES {
        ext.args = "ASSUME_SORTED=true REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=LENIENT PROGRAM_RECORD_ID='null' TMP_DIR=tmp",
        ext.prefix = { "${meta.id}.markdup.sorted" },
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/deduplicated/picard_metrics" },
                mode: params.publish_dir_mode,
                pattern: "metrics.txt"
            ]
        ]
    }

    withName: SAMTOOLS_SORT {
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/deduplicated/" },
                mode: params.publish_dir_mode,
                pattern: "deduplicated.sorted.bam"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/alignments/" },
                mode: params.publish_dir_mode,
                pattern: "markdup.sorted.bam"
            ]
        ]
    }

    withName: SAMTOOLS_FLAGSTAT {
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/samtools_stats/" },
                mode: params.publish_dir_mode,
                pattern: "flagstat"
            ]
        ]
    }

    withName: SAMTOOLS_STATS {
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/samtools_stats/" },
                mode: params.publish_dir_mode,
                pattern: "stats"
            ]
        ]
    }

    withName: SAMTOOLS_INDEX {
        ext.args = "",
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/samtools_stats/" },
                mode: params.publish_dir_mode,
                pattern: "bai",
                enabled: false
            ]
        ]
    }

    withName: METHYLDACKEL_MBIAS {
        ext.args = ""
    }

    withName: METHYLDACKEL_EXTRACT {
        ext.args = ""
    }

    withName: SAMTOOLS_FAIDX {
        ext.args = "",
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/reference_genome" }
        ]
    }

    withName: QUALIMAP_BAMQC {
        ext.args = ""
    }

    withName: PRESEQ_LCEXTRAP {
        ext.args = " -verbose -bam",
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/preseq" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ],
            [
                path: { "${params.outdir}/${params.aligner}/preseq/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
        ]
    }

    withName: MULTIQC {
        ext.args = "",
        publishDir = [
            path: { "${params.outdir}/multiqc/${params.aligner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
